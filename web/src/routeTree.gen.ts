/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as AppRouteImport } from './routes/_app'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AppProfileRouteImport } from './routes/_app/profile'
import { Route as AppDashboardRouteImport } from './routes/_app/dashboard'
import { ServerRoute as ApiAuthLogoutServerRouteImport } from './routes/api/auth/logout'
import { ServerRoute as ApiAuthLoginServerRouteImport } from './routes/api/auth/login'
import { ServerRoute as ApiAuthCallbackServerRouteImport } from './routes/api/auth/callback'

const rootServerRouteImport = createServerRootRoute()

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRoute = AppRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppProfileRoute = AppProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AppRoute,
} as any)
const AppDashboardRoute = AppDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AppRoute,
} as any)
const ApiAuthLogoutServerRoute = ApiAuthLogoutServerRouteImport.update({
  id: '/api/auth/logout',
  path: '/api/auth/logout',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthLoginServerRoute = ApiAuthLoginServerRouteImport.update({
  id: '/api/auth/login',
  path: '/api/auth/login',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthCallbackServerRoute = ApiAuthCallbackServerRouteImport.update({
  id: '/api/auth/callback',
  path: '/api/auth/callback',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/login': typeof LoginRoute
  '/dashboard': typeof AppDashboardRoute
  '/profile': typeof AppProfileRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/login': typeof LoginRoute
  '/dashboard': typeof AppDashboardRoute
  '/profile': typeof AppProfileRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_app': typeof AppRouteWithChildren
  '/admin': typeof AdminRoute
  '/login': typeof LoginRoute
  '/_app/dashboard': typeof AppDashboardRoute
  '/_app/profile': typeof AppProfileRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/admin' | '/login' | '/dashboard' | '/profile'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/admin' | '/login' | '/dashboard' | '/profile'
  id:
    | '__root__'
    | '/'
    | '/_app'
    | '/admin'
    | '/login'
    | '/_app/dashboard'
    | '/_app/profile'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRoute: typeof AppRouteWithChildren
  AdminRoute: typeof AdminRoute
  LoginRoute: typeof LoginRoute
}
export interface FileServerRoutesByFullPath {
  '/api/auth/callback': typeof ApiAuthCallbackServerRoute
  '/api/auth/login': typeof ApiAuthLoginServerRoute
  '/api/auth/logout': typeof ApiAuthLogoutServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/callback': typeof ApiAuthCallbackServerRoute
  '/api/auth/login': typeof ApiAuthLoginServerRoute
  '/api/auth/logout': typeof ApiAuthLogoutServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/callback': typeof ApiAuthCallbackServerRoute
  '/api/auth/login': typeof ApiAuthLoginServerRoute
  '/api/auth/logout': typeof ApiAuthLogoutServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/callback' | '/api/auth/login' | '/api/auth/logout'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/callback' | '/api/auth/login' | '/api/auth/logout'
  id: '__root__' | '/api/auth/callback' | '/api/auth/login' | '/api/auth/logout'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthCallbackServerRoute: typeof ApiAuthCallbackServerRoute
  ApiAuthLoginServerRoute: typeof ApiAuthLoginServerRoute
  ApiAuthLogoutServerRoute: typeof ApiAuthLogoutServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app/profile': {
      id: '/_app/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AppProfileRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/dashboard': {
      id: '/_app/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AppDashboardRouteImport
      parentRoute: typeof AppRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/auth/logout': {
      id: '/api/auth/logout'
      path: '/api/auth/logout'
      fullPath: '/api/auth/logout'
      preLoaderRoute: typeof ApiAuthLogoutServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/login': {
      id: '/api/auth/login'
      path: '/api/auth/login'
      fullPath: '/api/auth/login'
      preLoaderRoute: typeof ApiAuthLoginServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/callback': {
      id: '/api/auth/callback'
      path: '/api/auth/callback'
      fullPath: '/api/auth/callback'
      preLoaderRoute: typeof ApiAuthCallbackServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AppRouteChildren {
  AppDashboardRoute: typeof AppDashboardRoute
  AppProfileRoute: typeof AppProfileRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppDashboardRoute: AppDashboardRoute,
  AppProfileRoute: AppProfileRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRoute: AppRouteWithChildren,
  AdminRoute: AdminRoute,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthCallbackServerRoute: ApiAuthCallbackServerRoute,
  ApiAuthLoginServerRoute: ApiAuthLoginServerRoute,
  ApiAuthLogoutServerRoute: ApiAuthLogoutServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
